@page "/category"
@using Shop.DataModels.CustomModels
@using Show.Admin.Services
@inject IAdminPanelService adminPanelService;

<style>
	.modal {
		position: fixed;
		z-index: 1;
		padding-top: 100px;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		overflow: hidden;
		background-color: rgb(0,0,0);
		background-color: rgba(0,0,0,0.4);
		display: block;
	}

	.modal-content {
		background-color: #fefefe;
		margin: auto;
		padding: 20px;
		border: 1px solid #888;
		width: 50%;
		overflow: hidden;
	}

	.close {
		color: #aaaaaa;
		float: right;
		font-size: 28px;
		font-weight: bold;
	}

	.closezhover,
	.closezfocus {
		color: #000;
		text-decoration: none;
		cursor: pointer;
	}
</style>

@if (categoryModel == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="card">
		<h4 class="card-header">Category</h4>
		<div class="card-body">
			<EditForm Model="@categoryModel" OnValidSubmit="SaveCategory">
				<DataAnnotationsValidator />
				<div class="form-row">
					<div class="form-group col-5">
						<label>Name :</label>
						<InputText @bind-Value="categoryModel.Name" class="form-control"></InputText>
						<ValidationMessage For="@(() => categoryModel.Name)" />
					</div>
				</div>
				<div class="text-left">
					<input type="submit" class="btn btn-primary" value="Save" />
					<input type="button" class="btn btn-primary" value="Clear" @onclick="ClearForm" />
				</div>
			</EditForm>
		</div>
		<div class="card-body bg-dark">
			@if (categoryList == null)
			{
				<p><em>Loading...</em></p>
			}
			else
			{
				<table class="table table-striped table-bordered bg-light">
					<thead>
						<tr>
							<th style="width:15px;">Sr.No</th>
							<th>Category Name</th>
							<th style="width:86px;">Edit?</th>
							<th style="width:80px;">Delete?</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var (index, cat) in categoryList.Select((cat, i) => (i + 1, cat)))
						{
							<tr>
								<td>@index</td>
								<td>@cat.Name</td>
								<td><input type="button" class="btn btn-primary" value="Edit" @onclick="(()=>EditBtnClick(cat))" /></td>
								<td><input type="button" class="btn btn-primary" value="Delete" @onclick="(()=>DeleteBtnClick(cat))" /></td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
	</div>
}

@if (showEditPopup == true)
{
	<div class="modal">
		<div class="modal-content">
			<div class="modal-header">
				<h5>Edit Category</h5>
				<span class="close" @onclick="ToggleEditPopup">&times;</span>
			</div>
			<div class="modal-body">
				<EditForm Model="@categoryToUpdate" OnValidSubmit="UpdateCategory">
					<DataAnnotationsValidator />
					<div class="form-row">
						<div class="form-group col-5">
							<label>Name :</label>
							<InputText @bind-Value="categoryToUpdate.Name" class="form-control" />
							<ValidationMessage For="@(() => categoryToUpdate.Name)" />
						</div>
					</div>
				</EditForm>
			</div>
			<div class="modal-footer">
				<input type="button" class="btn btn-primary" value="Update" @onclick="UpdateCategory" />
				<input type="button" class="btn btn-primary" value="Cancel" @onclick="ToggleEditPopup" />
			</div>
		</div>
	</div>
}
@if (showDeletePopup == true)
{
	<div class="modal">
		<div class="modal-content">
			<div class="modal-header">
				<h5>Delete Category</h5>
				<span class="close" @onclick="ToggleDeletePopup">&times;</span>
			</div>
			<div class="modal-body">
				Are you Sure you want to Delete <span sty1e="background-color:yellow;">@categoryToDelete.Name ?</span>
			</div>
			<div class="modal-footer">
				<input type="button" class="btn btn-primary" value="Yes" @onclick="DeleteCategory" />
				<input type="button" class="btn btn-primary" value="No" @onclick="ToggleDeletePopup" />
			</div>
		</div>
	</div>
}
@if (successPoupup == true)
{
	<div class="modal">
		<div class="modal-content">
			<div class="modal-header">
				Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
			</div>
			<div class="modal-body">
				@Message
			</div>
			<div class="modal-footer">
				<input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
			</div>
		</div>
	</div>
}

@code {
	[CascadingParameter]
	public EventCallback notify { get; set; }//注册MainLayout的通知事件

	public CategoryModel categoryModel { get; set; } = new CategoryModel();
	public List<CategoryModel> categoryList { get; set; } = new List<CategoryModel>();

	public CategoryModel categoryToUpdate { get; set; }
	public CategoryModel categoryToDelete { get; set; }
	public bool showEditPopup = false;

	public bool showDeletePopup = false;

	public bool successPoupup = false;

	public string Message = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await GetCatgories();
	}

	private async Task SaveCategory()
	{
		await adminPanelService.SaveCategory(categoryModel);
		Message = "Category Added Successfully !!";
		ToggleSuccessPopup();
		categoryModel = new CategoryModel();
		await GetCatgories();
	}
	private async Task UpdateCategory()
	{
		ResponseModel response = await adminPanelService.UpdateCategory(categoryToUpdate);
		ToggleEditPopup();
		if (response.Status == true)
		{
			Message = "Category Updated Successfully !!";
		}
		else
		{
			Message = "Category Not Updated Try Again !!";
		}
		ToggleSuccessPopup();
		categoryToUpdate = new CategoryModel();
		await GetCatgories();
	}
	private async Task DeleteCategory()
	{
		ResponseModel response = await adminPanelService.DeleteCategory(categoryToDelete);
		ToggleDeletePopup();
		if (response.Status)
		{
			Message = "Category Deleted Successfully II";
		}
		else
		{
			Message = "Category Not Deleted Try Again !!";
		}
		ToggleSuccessPopup();
		categoryModel = new CategoryModel();
		await GetCatgories();
	}

	private async Task GetCatgories()
	{
		categoryList = await adminPanelService.GetCategories();
	}
	private void ClearForm()
	{
		categoryModel = new CategoryModel();
	}

	private void EditBtnClick(CategoryModel category)
	{		
		categoryToUpdate = category;
		ToggleEditPopup();
	}
	private void DeleteBtnClick(CategoryModel category)
	{
		categoryToDelete = category;
		ToggleDeletePopup();
	}
	private void ToggleEditPopup()
	{
		showEditPopup = showEditPopup == true ? false : true;
	}
	private void ToggleDeletePopup()
	{
		showDeletePopup = showDeletePopup == true ? false : true;
	}
	private void ToggleSuccessPopup()
	{
		successPoupup = successPoupup == true ? false : true;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// 当组件第一次渲染后，调用通知事件(确保不会未登录的时候访问此页面)
			await notify.InvokeAsync();
		}
	}
}
